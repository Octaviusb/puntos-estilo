#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üé§ Generador Autom√°tico de Audio con IA - Puntos Estilo
Autor: Octavio Buitrago
Fecha: 2024

Este script automatiza la generaci√≥n de audio para los videos de Puntos Estilo
usando ElevenLabs API.
"""

import requests
import json
import os
import time
from pathlib import Path

class AudioGenerator:
    def __init__(self, api_key):
        self.api_key = api_key
        self.base_url = "https://api.elevenlabs.io/v1"
        self.headers = {
            "Accept": "audio/mpeg",
            "Content-Type": "application/json",
            "xi-api-key": api_key
        }
        
        # Crear directorios si no existen
        self.audio_dir = Path("audio")
        self.audio_dir.mkdir(exist_ok=True)
        
        for subdir in ["video1-demo", "video2-promocional", "video3-tutorial"]:
            (self.audio_dir / subdir).mkdir(exist_ok=True)

    def get_voices(self):
        """Obtener lista de voces disponibles"""
        url = f"{self.base_url}/voices"
        response = requests.get(url, headers=self.headers)
        
        if response.status_code == 200:
            voices = response.json()["voices"]
            print("üé§ Voces disponibles:")
            for voice in voices:
                print(f"  - {voice['name']} (ID: {voice['voice_id']})")
            return voices
        else:
            print(f"‚ùå Error al obtener voces: {response.status_code}")
            return []

    def generate_audio(self, text, voice_id, filename, voice_settings=None):
        """Generar audio con ElevenLabs"""
        url = f"{self.base_url}/text-to-speech/{voice_id}"
        
        # Configuraci√≥n por defecto
        if voice_settings is None:
            voice_settings = {
                "stability": 0.5,
                "similarity_boost": 0.75,
                "style": 0.0,
                "use_speaker_boost": True
            }
        
        data = {
            "text": text,
            "model_id": "eleven_monolingual_v1",
            "voice_settings": voice_settings
        }
        
        print(f"üéµ Generando audio: {filename}")
        response = requests.post(url, json=data, headers=self.headers)
        
        if response.status_code == 200:
            filepath = self.audio_dir / filename
            with open(filepath, "wb") as f:
                f.write(response.content)
            print(f"‚úÖ Audio guardado: {filepath}")
            return True
        else:
            print(f"‚ùå Error al generar audio: {response.status_code}")
            print(f"Respuesta: {response.text}")
            return False

    def generate_video1_audio(self, voice_id):
        """Generar audio para Video 1: Demo del Sistema"""
        print("\nüé¨ Generando audio para Video 1: Demo del Sistema")
        
        scripts = {
            "video1-demo/01-intro.mp3": "Bienvenidos a Puntos Estilo, el sistema integral de fidelizaci√≥n que revoluciona la relaci√≥n con tus clientes. En este video te mostraremos c√≥mo transformar tu negocio con nuestra plataforma completa.",
            
            "video1-demo/02-problema.mp3": "Los programas de fidelizaci√≥n tradicionales presentan varios desaf√≠os. Son complicados de implementar, costosos de mantener, dif√≠ciles de usar para los clientes y no proporcionan datos en tiempo real. Esto genera frustraci√≥n tanto para las empresas como para sus clientes.",
            
            "video1-demo/03-solucion.mp3": "Puntos Estilo simplifica todo. Ofrecemos un sistema completo en una plataforma, f√°cil de implementar, con costo accesible y datos en tiempo real. Nuestra soluci√≥n est√° dise√±ada para ser intuitiva y efectiva desde el primer d√≠a.",
            
            "video1-demo/04-demo-admin.mp3": "Como administrador, tienes control total sobre tu programa de fidelizaci√≥n. Puedes gestionar usuarios, configurar puntos, crear beneficios personalizados, ver reportes detallados y monitorear la actividad en tiempo real. Todo desde un panel intuitivo y f√°cil de usar.",
            
            "video1-demo/05-demo-usuario.mp3": "Los usuarios disfrutan de una experiencia excepcional. Pueden ver sus puntos acumulados de forma clara, explorar un cat√°logo atractivo de beneficios, canjear recompensas con un solo clic, ver su historial completo e invitar amigos para ganar puntos adicionales.",
            
            "video1-demo/06-caracteristicas.mp3": "Nuestras caracter√≠sticas t√©cnicas garantizan la mejor experiencia. Incluimos seguridad de nivel bancario, dise√±o responsive para todos los dispositivos, integraci√≥n f√°cil con sistemas existentes, soporte t√©cnico 24/7 y escalabilidad para el crecimiento de tu negocio.",
            
            "video1-demo/07-beneficios.mp3": "Los beneficios para tu negocio son significativos. Nuestros clientes han experimentado un aumento del 67% en retenci√≥n de clientes, incremento del ticket promedio, obtenci√≥n de datos valiosos sobre el comportamiento de los clientes y diferenciaci√≥n competitiva en el mercado.",
            
            "video1-demo/08-casos-exito.mp3": "Empresas de diversos sectores ya conf√≠an en nosotros. Un restaurante XYZ experiment√≥ un aumento del 45% en ventas, una tienda ABC logr√≥ un 30% m√°s de retenci√≥n de clientes, y un servicio DEF alcanz√≥ un 50% m√°s de engagement con su programa.",
            
            "video1-demo/09-cta.mp3": "¬øListo para transformar tu negocio? Agenda una demo gratuita personalizada, visita puntosestilo.com para m√°s informaci√≥n, ll√°manos al +57 555-555-555 o env√≠anos un email a info@puntosestilo.com. El futuro de la fidelizaci√≥n est√° aqu√≠."
        }
        
        for filename, text in scripts.items():
            success = self.generate_audio(text, voice_id, filename)
            if not success:
                print(f"‚ö†Ô∏è Saltando {filename} debido a error")
            time.sleep(1)  # Pausa entre requests

    def generate_video2_audio(self, voice_id):
        """Generar audio para Video 2: Promocional"""
        print("\nüé¨ Generando audio para Video 2: Promocional")
        
        script = "¬øQuieres aumentar la lealtad de tus clientes? Los programas de fidelizaci√≥n tradicionales son complejos y costosos. Puntos Estilo simplifica todo. Sistema completo en una plataforma. Acumulaci√≥n autom√°tica, cat√°logo personalizable, analytics en tiempo real. ¬°Comienza hoy! puntosestilo.com"
        
        self.generate_audio(script, voice_id, "video2-promocional/promocional-completo.mp3")

    def generate_video3_audio(self, voice_id):
        """Generar audio para Video 3: Tutorial"""
        print("\nüé¨ Generando audio para Video 3: Tutorial")
        
        scripts = {
            "video3-tutorial/01-intro.mp3": "En este tutorial aprender√°s a usar Puntos Estilo paso a paso. Te guiaremos a trav√©s de todas las funcionalidades para que aproveches al m√°ximo nuestra plataforma.",
            
            "video3-tutorial/02-registro.mp3": "Primero, ve a puntosestilo.com. Haz clic en el bot√≥n 'Registrarse' en la esquina superior derecha. Completa el formulario con tus datos personales, verifica tu direcci√≥n de email y luego inicia sesi√≥n con tus credenciales.",
            
            "video3-tutorial/03-panel.mp3": "En tu panel de usuario ver√°s toda la informaci√≥n importante. En la parte superior encontrar√°s tus puntos acumulados, en el centro el historial de transacciones, a la izquierda los beneficios disponibles y en la esquina superior derecha la configuraci√≥n de tu perfil.",
            
            "video3-tutorial/04-catalogo.mp3": "Para explorar beneficios, navega por las diferentes categor√≠as disponibles. Puedes filtrar por cantidad de puntos, leer las descripciones detalladas de cada beneficio y ver las im√°genes de alta calidad. Todo est√° organizado de manera intuitiva.",
            
            "video3-tutorial/05-canje.mp3": "Para canjear un beneficio, simplemente selecci√≥nalo del cat√°logo, confirma la cantidad de puntos que se descontar√°n, recibe tu c√≥digo √∫nico de canje y √∫salo en el establecimiento correspondiente. El proceso es r√°pido y seguro.",
            
            "video3-tutorial/06-referidos.mp3": "Invita amigos y gana puntos adicionales. Comparte tu enlace personal de invitaci√≥n, gana puntos por cada registro exitoso, rastrea tus invitaciones en tiempo real y recibe recompensas por tu red de referidos.",
            
            "video3-tutorial/07-configuracion.mp3": "Personaliza tu experiencia actualizando tu perfil con informaci√≥n actualizada, configurando las notificaciones seg√∫n tus preferencias, gestionando tu privacidad y conectando tus redes sociales para mayor integraci√≥n.",
            
            "video3-tutorial/08-soporte.mp3": "Si necesitas ayuda en cualquier momento, tenemos m√∫ltiples canales de soporte. Chat en vivo disponible 24/7, email de soporte, tel√©fono directo y una secci√≥n de FAQ completa en nuestra web."
        }
        
        for filename, text in scripts.items():
            success = self.generate_audio(text, voice_id, filename)
            if not success:
                print(f"‚ö†Ô∏è Saltando {filename} debido a error")
            time.sleep(1)  # Pausa entre requests

    def generate_all_audio(self, voice_id):
        """Generar todo el audio para los 3 videos"""
        print("üé§ Iniciando generaci√≥n completa de audio...")
        
        self.generate_video1_audio(voice_id)
        self.generate_video2_audio(voice_id)
        self.generate_video3_audio(voice_id)
        
        print("\nüéâ ¬°Generaci√≥n de audio completada!")
        print("üìÅ Archivos guardados en la carpeta 'audio/'")

def main():
    print("üé§ Generador Autom√°tico de Audio - Puntos Estilo")
    print("=" * 50)
    
    # Solicitar API key
    api_key = input("üîë Ingresa tu API key de ElevenLabs: ").strip()
    
    if not api_key:
        print("‚ùå API key requerida. Obt√©n una en https://elevenlabs.io/")
        return
    
    # Crear generador
    generator = AudioGenerator(api_key)
    
    # Mostrar voces disponibles
    voices = generator.get_voices()
    
    if not voices:
        print("‚ùå No se pudieron obtener las voces. Verifica tu API key.")
        return
    
    # Seleccionar voz
    print("\nüéØ Selecciona una voz:")
    print("1. Carlos (Masculino profesional)")
    print("2. Ana (Femenino energ√©tico)")
    print("3. Ver todas las voces")
    print("4. Ingresar ID de voz manualmente")
    
    choice = input("\nSelecciona una opci√≥n (1-4): ").strip()
    
    voice_id = None
    
    if choice == "1":
        # Buscar voz masculina
        for voice in voices:
            if "carlos" in voice["name"].lower() or "male" in voice["name"].lower():
                voice_id = voice["voice_id"]
                print(f"‚úÖ Voz seleccionada: {voice['name']}")
                break
    elif choice == "2":
        # Buscar voz femenina
        for voice in voices:
            if "ana" in voice["name"].lower() or "female" in voice["name"].lower():
                voice_id = voice["voice_id"]
                print(f"‚úÖ Voz seleccionada: {voice['name']}")
                break
    elif choice == "3":
        # Mostrar todas las voces
        for i, voice in enumerate(voices, 1):
            print(f"{i}. {voice['name']} (ID: {voice['voice_id']})")
        voice_choice = input("Selecciona el n√∫mero de la voz: ").strip()
        try:
            voice_id = voices[int(voice_choice) - 1]["voice_id"]
        except (ValueError, IndexError):
            print("‚ùå Selecci√≥n inv√°lida")
            return
    elif choice == "4":
        voice_id = input("Ingresa el ID de la voz: ").strip()
    else:
        print("‚ùå Opci√≥n inv√°lida")
        return
    
    if not voice_id:
        print("‚ùå No se pudo seleccionar una voz")
        return
    
    # Generar audio
    print(f"\nüéµ Generando audio con voz ID: {voice_id}")
    generator.generate_all_audio(voice_id)
    
    print("\nüìã Pr√≥ximos pasos:")
    print("1. Revisar los archivos de audio generados")
    print("2. Importar en DaVinci Resolve")
    print("3. Sincronizar con grabaci√≥n de pantalla")
    print("4. Agregar m√∫sica de fondo")
    print("5. Exportar video final")

if __name__ == "__main__":
    main() 